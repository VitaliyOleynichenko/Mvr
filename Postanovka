Постановка задачи для разработки веб-интерфейсов МВР1 и МВР2

1. Цель
Разработать два независимых веб-интерфейса (чистый HTML5/CSS3/Vanilla JS и PHP 7+) для визуализации процесса поперечной резки слитков на Машине Вертикальной Резки (МВР):

/mvr1 — интерфейс для зоны mvr1

/mvr2 — интерфейс для зоны mvr2

Визуальная часть, логика отображения и поведение одинаковы, различаются только данные, отфильтрованные по полю zone.

2. Источники данных
Геометрия заготовок

Таблица: mvr

Поля:

id — уникальный идентификатор заготовки

x, y — текущие координаты на рольганге (в пикселях или условных единицах)

length — длина прямоугольника-заготовки

zone — строка: mvr1 или mvr2

Сигналы состояния агрегата

Таблица: signals (условное название, данные из АСУ ТП)

Поля:

zone — mvr1 или mvr2

state — строка:

idle — агрегат ожидает реза

cutting — агрегат в процессе резки

Важно: в этой таблице нет привязки по id к конкретной заготовке — сигналы приходят на уровень агрегата/зоны. А то, какая именно заготовка режется, определяется на клиенте по тому, какая заготовка в данный момент находится в зоне реза на рольганге.

3. Структура страницы
Рольганг (ниже середины окна)

Горизонтальный конвейер (HTML/CSS) протяжённостью на всю ширину.

Для каждой записи из mvr создаётся прямоугольник (<div> или Canvas/SVG) с позиционированием left: x, top: y, шириной length и фиксированной высотой.

Схема МВР (над рольгангом)

Графическое обозначение режущего узла (SVG-контур или CSS-каркас).

Рядом цветной индикатор (<div> с классом):

Зелёный при state = idle

Оранжевый при state = cutting

4. API и взаимодействие
4.1. Запрос геометрии
Endpoint:

pgsql
Копировать
Редактировать
GET /api/mvr.php?zone={mvr1|mvr2}
SQL в PHP (PDO):

sql
Копировать
Редактировать
SELECT id, x, y, length
  FROM mvr
 WHERE zone = :zone;
Ответ: JSON-массив объектов { id, x, y, length }.

4.2. Запрос состояния агрегата
Endpoint:

pgsql
Копировать
Редактировать
GET /api/signals.php?zone={mvr1|mvr2}
SQL в PHP (PDO):

sql
Копировать
Редактировать
SELECT state
  FROM signals
 WHERE zone = :zone
 LIMIT 1;
Ответ: JSON-объект { state: "idle"|"cutting" }.

5. Логика работы интерфейса
Инициализация

При загрузке страницы клиент делает два AJAX-запроса:

к /api/mvr.php?zone=… → получает все заготовки для своей зоны

к /api/signals.php?zone=… → получает текущее состояние агрегата

JS отрисовывает прямоугольники на рольганге и выставляет цвет индикатора.

Анимация движения

Через requestAnimationFrame() (или CSS-анимацию) смещает заготовки по x вправо с постоянной скоростью.

Определение резки

В config.js задаются координаты зоны реза:

js
Копировать
Редактировать
const X_CUT_START = ...;
const X_CUT_END   = ...;
На каждом фрейме проверяется: если центр прямоугольника попадает в [X_CUT_START, X_CUT_END] и агрегат в состоянии cutting, то именно эта заготовка считается режущейся.

Индикатор меняется на оранжевый (если ещё не менялся).

После выхода центра заготовки за X_CUT_END (резка завершена) —

Удалить этот прямоугольник из отрисовки.

Сделать AJAX-запрос к /api/mvr.php?zone=<zone>&after_id=<id> для получения новых частей (если механизм базы выдаёт только дополнения после after_id).

Добавить новые прямоугольники-сегменты с их x, y, length.

Если ни одна заготовка не в зоне реза или state = idle, индикатор остаётся зелёным.

Поддержание актуальности

Интервальный опрос (setInterval) каждые N секунд:

/api/mvr.php?zone=… — на случай появления новых заготовок до зоны реза.

/api/signals.php?zone=… — получение изменения состояния агрегата.

Обновлять только изменившиеся объекты, без полной перезагрузки страницы.

6. Нефункциональные требования
Технологии:

HTML5, CSS3 (Flex/Grid, анимации), Vanilla JS (ES6+)

PHP 7+ с PDO/MySQL

Производительность:

Плавная анимация до 100 заготовок на экран при 60 FPS

Совместимость:

Последние стабильные версии Chrome, Firefox, Edge

Конфигурация:

Файл config.js (или config.php) с параметрами: зона реза, частота опроса, скорость движения, максимальное число объектов.

7. Критерии приёмки
Фильтрация по зоне: /mvr1 → только zone='mvr1', /mvr2 → только zone='mvr2'.

Плавная анимация прямоугольников без лагов.

Индикатор состояния: всегда соответствует последнему state из таблицы signals.

Корректная резка:

Режущаяся заготовка определяется по попаданию в зону реза и state='cutting'.

После «резки» появляется корректное число частей с правильными координатами и размерами.

Стабильность работы: отсутствие утечек памяти и ошибок при непрерывной работе ≥ 8 часов.



